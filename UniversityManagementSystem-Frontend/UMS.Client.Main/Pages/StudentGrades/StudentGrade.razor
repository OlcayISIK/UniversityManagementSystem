@page "/student/grades"
@layout MainLayout
@using MudBlazor
@using Microsoft.Extensions.Configuration
@using UMS.Client.Business.Helpers
@using UMS.Client.Business.Interface.Shared
@using UMS.Client.Core.Enums
@using UMS.Client.Dtos
@using UMS.Client.Dtos.Shared
@using Microsoft.AspNetCore.Authorization
@using UMS.Client.Business.Interface.StudentService
@using UMS.Client.Dtos.Student
@using UMS.Client.Main.CustomComponents.DialogComponents
@using UMS.Client.Main.Pages.Events.Components
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IHttpService HttpService
@inject ILocalStorageService LocalStorageService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IEventService EventService
@inject IConfiguration Configuration
@inject IPageAuthenticationService PageAuthenticationService
@inject IStudentService StudentService
@if (GradeList == null)
{
    <Spinner />
}
else
{
    <div class="card mt-2 Grid-Card" style="max-width: 75rem; margin-left: auto; margin-right: auto;">
        <div class="card-header">
        </div>
        <MudTable Items="@GradeList.Data" Dense="true" Hover="true" Filter="new Func<StudentGradeDto,bool>(FilterFunc)" SortLabel="Sort By" Class="Table-Grid">
            <ToolBarContent>
                <MudText Class="Table-Grid-Header" Typo="Typo.h6">Course Grades List</MudText>
                <MudSpacer />
                <input type="text" name="search" placeholder="Search" @bind-value="searchString" @bind-value:event="oninput">
            </ToolBarContent>
            <ColGroup>
                <col style="width: 50%;" />
                <col style="width: 50%;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel Class="Table-Grid-Header" InitialDirection="MudBlazor.SortDirection.Ascending" SortBy="new Func<StudentGradeDto, object>(x=>x.CourseName)">Course Name</MudTableSortLabel></MudTh>
                <MudTh><label Class="Table-Grid-Header">Grade</label></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Course Name">@context.CourseName</MudTd>
                <MudTd DataLabel="Grade">@context.Grade</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager Style="color:white;font-weight:700;" RowsPerPageString="RowsPerPage" PageSizeOptions="new int[]{5, 10, 20}" />
            </PagerContent>
        </MudTable>
    </div>
}


@code {
    private Result<IEnumerable<StudentGradeDto>> GradeList;
    private Result<IEnumerable<CourseDto>> CourseList;
    UserType UserControl;
    long UserId;
    private StudentGradeDto selectedGrade = new StudentGradeDto();
    bool UserAuthControl;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        UserControl = await LocalStorageService.GetCurrentUserType();
        UserId = long.Parse(await LocalStorageService.GetUserId());
        UserAuthControl = PageAuthenticationService.ControlAuthentication(Pages.StudentGrades, UserControl);

        if (UserAuthControl)
        {
            try
            {
                GradeList = await StudentService.GetStudentGrades(UserId);
                CourseList = await StudentService.GetStudentCourses(UserId);
                foreach (var grade in GradeList.Data)
                {
                    foreach (var course in CourseList.Data)
                    {
                        if (grade.CourseId == course.Id)
                        {
                            grade.CourseName = course.Name;
                        }
                    }
                }

                if (GradeList == null)
                    return;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add("Error Occured", Severity.Error, options => options.Onclick = snackbar => Task.CompletedTask);
                NavigationManager.NavigateTo("/user");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/user");
        }
    }

    private bool FilterFunc(StudentGradeDto studentGradeDto)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (studentGradeDto.Grade == null)
            return false;

        return false;
    }
    void CancelSearch()
    {
        searchString = null;
    }
}
