@using MudBlazor
@inject IStudentGradeService GradeService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Components
@using UMS.Client.Business.Interface.Teacher
@using UMS.Client.Dtos
<MudTable Items="@Elements" CanCancelEdit="true" Filter="new Func<StudentGradeDto,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Grade is Updated"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:50%;" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<StudentGradeDto, object>(x=>x.Student.Name)">Student Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StudentGradeDto, object>(x=>x.Grade)">Grade</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CourseName">@context.CourseName</MudTd>
        <MudTd DataLabel="Grade">@context.Grade</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="CourseName">@context.CourseName</MudTd>
        <MudTd DataLabel="Grade">
            <MudTextField @bind-Value="@context.Grade" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code { 
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public CourseDto CourseDetail { get; set; }
    private List<string> editEvents = new();
    private string searchString = "";
    private StudentGradeDto selectedItem1 = null;
    private StudentGradeDto elementBeforeEdit;
    private HashSet<StudentGradeDto> selectedItems1 = new HashSet<StudentGradeDto>();

    private IEnumerable<StudentGradeDto> Elements = new List<StudentGradeDto>();


    protected override async Task OnInitializedAsync()
    {
        Elements = (await GradeService.GetStudentGrades(CourseDetail.Id)).Data;
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            CourseName = ((StudentGradeDto)element).CourseName,
            Grade = ((StudentGradeDto)element).Grade,
            CourseId = ((StudentGradeDto)element).CourseId,
            StudentId = ((StudentGradeDto)element).StudentId
        };
    }

    private void ItemHasBeenCommitted(object element)
    {
        //AddEditionEvent($"RowEditCommit event: Changes to Element {((CategoryTypes.Element)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((StudentGradeDto)element).CourseName = elementBeforeEdit.CourseName;
        ((StudentGradeDto)element).Grade = elementBeforeEdit.Grade;
        ((StudentGradeDto)element).StudentId = elementBeforeEdit.StudentId;
        ((StudentGradeDto)element).CourseId = elementBeforeEdit.CourseId;
    }

    private bool FilterFunc(StudentGradeDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CourseName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    } 
}