@page "/chat"
@page "/chat/{ContactId}"
@using Microsoft.AspNetCore.SignalR.Client
@using UMS.Client.Business.Interface.Shared
@using UMS.Client.Business.Interface.StudentService
@using UMS.Client.Core.Enums
@using UMS.Client.Dtos.Student
@using UMS.Client.Dtos.Shared
@using UMS.Dto
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IStudentService StudentService
@inject ILocalStorageService LocalStorageService
@inject IChatService ChatService
@inject IJSRuntime _jsRuntime
@implements IAsyncDisposable

<style>
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
    color: black;
}
.mud-button-label {
    color: green;
}
</style>
<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
             @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                if (message.FromUser.Username == CurrentUsername)
                {
                    <div style = "float:right">
                        <div class="d-flex flex-row my-4" style="float:right">
                        <div class="mr-4">
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.FromUser.Username.FirstOrDefault()</MudAvatar>
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.FromUser.Username</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedAt.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                            <MudText Typo="Typo.body2"Style="@($"padding: 15px; border-radius: 5px;margin-top:5px; color:{Colors.Green.Lighten5}; background:{Colors.Green.Darken4};")">@message.Message</MudText>
                        </div>
                        </div>
                    </div>
               
                }
                else
                {
                     <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.FromUser.Username.FirstOrDefault()</MudAvatar>
                    </div>
                    <div>
                        <MudText Typo="Typo.body1">@message.FromUser.Username</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedAt.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                            <MudText Typo="Typo.body2"Style="@($"padding: 15px; border-radius: 5px;margin-top:5px; color:{Colors.Green.Lighten5}; background:{Colors.Grey.Darken4};")">@message.Message</MudText>
                    </div>
                    </div>
                }

            }
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField @onkeydown="OnKeyDownEvent" T="string" Placeholder="Enter your message..."DisableUnderLine="true" Class="mt-n2 mx-4"
                          @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
            <MudButton OnClick="() => Send(CurrentMessage)" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
        <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="350px">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
                <MudText Typo="Typo.h6">contacts</MudText>
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                <MudList Clickable="true">
                    @foreach (var user in ChatUsers)
                    {
                        if(user.Username != CurrentUsername)
                        {
                         <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadUserChat(user.Id))">
                            <div class="d-flex flex-row mt-n1 mb-n1">
                                <div class="mr-4">
                                    <MudBadge Class="my-2">
                                        @if (user.Id.ToString() == ContactId)
                                        {
                                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@user.Email.ToUpper().FirstOrDefault()</MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">@user.Email.ToUpper().FirstOrDefault()</MudAvatar>
                                        }
                                    </MudBadge>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@user.Email</MudText>
                                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@user.Username</MudText>
                                </div>
                            </div>
                        </MudListItem>
                        }
                       
                    }
                </MudList>
            </div>
        </MudPaper>
          @if (apptype.Equals(ApplicationType.TeacherPanel))
            NavigationManager.NavigateTo("/");
</div>

@code {
    private HubConnection hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    [Parameter] public string ContactId { get; set; }
    public long CurrentUserId { get; set; }
    public string CurrentUsername { get; set; }
    public StudentDto ToUser { get; set; }
    public List<StudentDto> ChatUsers = new List<StudentDto>();
    public string ContactEmail { get; set; }
    public string CurrentMessage { get; set; }
    private ChatDto chatDto = new();
    private ApplicationType apptype;

    protected override async Task OnInitializedAsync()
    {
        apptype =await LocalStorageService.GetApplicationType();
        CurrentUserId = long.Parse(await LocalStorageService.GetUserId());
        CurrentUsername = await LocalStorageService.GetUsername();
        ChatUsers = (await StudentService.GetAll()).Data.ToList();
     
        if (!string.IsNullOrEmpty(ContactId))
        {
            await LoadUserChat(long.Parse(ContactId));
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5005/chathub")
            .Build();

        hubConnection.On<ChatMessage>("ReceiveMessage", async message =>
        {
            if ((ContactId == message.ToUserId.ToString() && CurrentUserId == message.FromUserId) || (ContactId == message.FromUserId.ToString() && CurrentUserId == message.ToUserId))
            {

                if ((ContactId == message.ToUserId.ToString() && CurrentUserId == message.FromUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedAt = message.CreatedAt, FromUser = new StudentDto() { Username = CurrentUsername } });
                    ChatMessage notificationMessage = new ChatMessage
                    {
                        ToUserId = long.Parse(ContactId),
                        FromUserId = CurrentUserId,
                        Message = $"New Message From {CurrentUsername}"
                    };
                    await hubConnection.SendAsync("ChatNotificationAsync", notificationMessage);
                }
                else if ((ContactId == message.FromUserId.ToString() && CurrentUserId == message.ToUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedAt = message.CreatedAt, FromUser = new StudentDto() { Username = CurrentUsername } });
                }
            }
            await LoadUserChat(long.Parse(ContactId));
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    async Task Send(string inputMessage)
    {
        ChatMessage message = new ChatMessage()
        {
            FromUserId = CurrentUserId,
            Message = CurrentMessage,
            CreatedAt = DateTime.Now,
            ToUserId = long.Parse(ContactId),        
        };
        await ChatService.Add(message);
        await hubConnection.SendAsync("SendMessage", message);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    async Task LoadUserChat(long userId)
    {
        var contact = (await StudentService.Get(userId)).Data;
        ToUser = contact;
        ContactId = contact.Id.ToString();
        ContactEmail = contact.Email;
        chatDto.ContactId = long.Parse(ContactId);
        chatDto.UserId = CurrentUserId;
        NavigationManager.NavigateTo($"chat/{ContactId}");
        messages = new List<ChatMessage>();
        messages = (await ChatService.Get(chatDto)).Data.ToList();
    }
    private async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter" || eventArgs.Code == "NumpadEnter")
        {
            var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./app.js");
            var messageToBeSent = await module.InvokeAsync<string>("getMessageInput");
            await Send(messageToBeSent);
        }
    }
}