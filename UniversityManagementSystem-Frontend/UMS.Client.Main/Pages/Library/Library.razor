@page "/Library"
@layout MainLayout
@using MudBlazor
@using UMS.Client.Business.Helpers
@using UMS.Client.Business.Interface.Shared
@using UMS.Client.Core.Enums
@using UMS.Client.Dtos.Shared
@using Microsoft.AspNetCore.Authorization
@using UMS.Client.Business.Interface.StudentService
@using UMS.Client.Business.Interface.Teacher
@using UMS.Client.Dtos.Student
@using UMS.Client.Main.CustomComponents.DialogComponents
@using UMS.Client.Main.Pages.Library.Components
@using UMS.Client.Dtos;
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IFileService FileService
@inject IPageAuthenticationService PageAuthenticationService
@inject IStudentService StudentService
@inject ICourseService CourseService


@if (FileList == null && courses == null)
{
    <Spinner />
}
else
{
        @if(courses.Count > 2)
        {
             <center>
                 <MudButtonGroup Color="Color.Dark" Variant="Variant.Filled">
                @for(int i = 0; i <= courses.Count/2;i++)
                {
                        var pageNumber = i+1;
                        <MudButton OnClick="@(() => SetPage((pageNumber-1)*2))">Course Page @pageNumber</MudButton>
                }
                </MudButtonGroup>
            </center>
        }
   

     <div style="max-width: 75rem; margin-left: auto; margin-right: auto; position:relative; ">
         @if(courses.Count-1 >= Page)
        {
      
            <div style=" position:absolute; width:40%; height:13%; margin-left: 30%;  margin-top: 2%; ">
                     @foreach(var file in FileList.Data.Where(x=> x.CourseId == courses[Page].Id))
                    {
                        var bookName = CreateBook();
                        var src = "/Images/" + bookName + ".png";
                        <img id="@file.Id" class="Books" src="@src" title="@file.Name" onclick="@(()=>FileInfo(file.Id) )">
                    }
                    <MudFab Color="Color.Primary" OnClick="@(() => AddNote(Page))" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-top:5%; margin-left:5px;"/>
            
             </div>
              <div style=" position:absolute; background-color:white;border:3px solid black;width:20%; height:4%; margin-left: 40%;  margin-top: 10%; ">
                    <p style=" text-align:center; font-family:Impact, fantasy; font-size:15px; margin-top:auto; margin-bottom:auto;">@courses[Page].Course.Title - @courses[Page].Course.Name</p>
              </div>
        }

        @if(courses.Count-1 >= Page+1)
        {
            <div style=" position:absolute; width:40%; height:13%; margin-left: 30%;  margin-top: 24.5%; ">
                
                     @foreach(var file in FileList.Data.Where(x=> x.CourseId == courses[Page+1].Id))
                    {
                        var bookName = CreateBook();
                        var src = "/Images/" + bookName + ".png";
                        <img id="@file.Id" class="Books" src="@src" title="@file.Name" onclick="@(()=>FileInfo(file.Id) )">
                    }
                    <MudFab Color="Color.Primary" OnClick="@(() => AddNote(Page+1))" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-top:5%; margin-left:5px;"/>
                
                </div>
                 <div style=" position:absolute; background-color:white;border:3px solid black;width:20%; height:4%; margin-left: 40%;  margin-top: 10%; ">
                        <p style=" text-align:center; font-family:Impact, fantasy; font-size:15px; margin-top:auto; margin-bottom:auto;">@courses[Page+1].Course.Title - @courses[Page].Course.Name</p>
                </div>
        }

            <div style=" position:absolute; width:40%; height:13%; margin-left: 30%;  margin-top: 47%; ">
                 @foreach(var file in FileList.Data.Where(x=> x.CourseId == null))
                {
                     var bookName = CreateBook();
                        var src = "/Images/" + bookName + ".png";
                        <img id="@file.Id" class="Books" src="@src" title="@file.Name" onclick="@(()=>FileInfo(file.Id) )">
                }
               <MudFab Color="Color.Primary" OnClick="@(() => AddNote(-1))" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-top:5%; margin-left:5px;"/>
            </div>
             <div style=" position:absolute; background-color:white;border:3px solid black;width:20%; height:4%; margin-left: 40%;  margin-top: 55%; ">
                 <p style=" text-align:center; font-family:Impact, fantasy; font-size:15px; margin-top:auto; margin-bottom:auto;">My Notes</p>
            </div>


            <img src="/Images/shelf.png" style="width:45%; margin-left: auto; margin-right: auto;">
        </div>

}


@code {
    public LibraryFilesDto libraryFileDto = new LibraryFilesDto();
    private Result<IEnumerable<FileDto>> FileList;
    List<StudentCourseDto> courses;
    UserType UserControl;
    bool UserAuthControl;
    int Page = 0;
    long _userID;
    protected override async Task OnInitializedAsync()
    {
        UserControl = await LocalStorageService.GetCurrentUserType();
        UserAuthControl = PageAuthenticationService.ControlAuthentication(Pages.Library, UserControl);
        _userID= long.Parse(await LocalStorageService.GetUserId());

        if (UserAuthControl)
        {
            try
            {
                if(UserControl == UserType.Student)
                {
                    var _courses = await StudentService.GetStudentCourses(_userID);
                    FileList = await FileService.GetAll(_userID);
                    courses = _courses.Data.ToList();
                }   
                else if(UserControl == UserType.Teacher)
                {
                    var _courses = await CourseService.GetAll(_userID);
                    FileList = await FileService.GetAllForTeacher(_userID);
                    courses = _courses.Data.ToList();
                }

                if (FileList == null)
                    return;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add("Error Occured", Severity.Error, options => options.Onclick = snackbar => Task.CompletedTask);
                NavigationManager.NavigateTo("/user");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/user");
        }
    }

    private async void AddNote(int page)
    {
        FileDto fileDto = new FileDto();
        if (page != -1)
            fileDto.CourseId = courses[page].Id;
        var parameters = new DialogParameters { ["FileObject"] = fileDto, ["operationType"] = OperationType.Add};
        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<LibraryModal>("Add Note", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if(UserControl == UserType.Student) FileList = await FileService.GetAll(_userID);
            else if(UserControl == UserType.Teacher) FileList = await FileService.GetAllForTeacher(_userID);
            StateHasChanged();
        }

    }
    void SetPage(int page)
    {
        Console.WriteLine(page);
        Page = page;
    }
    private async void FileInfo(long id)
    {
        FileDto fileDto = new FileDto();
        var file= await FileService.Get(id);
        fileDto = file.Data.First();
        var parameters = new DialogParameters { ["FileObject"] = fileDto};
        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<LibraryInfoModal>("Note", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if(UserControl == UserType.Student) FileList = await FileService.GetAll(_userID);
            else if(UserControl == UserType.Teacher) FileList = await FileService.GetAllForTeacher(_userID);
            StateHasChanged();
        }
    }
    private string CreateBook()
    {
        Random rand = new Random();
        var random = rand.Next(1,6);
        string bookName = "Book1";
        switch(random)
        {
            case 2:
                bookName = "Book2";
                break;
            case 3:
                bookName = "Book3";
                break;
            case 4:
                bookName = "Book4";
                break;
            case 5:
                bookName = "Book5";
                break;
            case 6:
                bookName = "Book6";
                break;
        }
        return bookName;
    }
}
