@using UMS.Client.Business.Interface.StudentService
@using UMS.Client.Core.Enums
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using UMS.Client.Business.Interface.Shared
@using UMS.Client.Dtos.Shared
@inject ISnackbar Snackbar
@inject IFileService FileService
@inject ILocalStorageService LocalStorageService


<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: calc(100vh - 10em); overflow-y: scroll;" Class="scrollable">
            <EditForm Model="@FileObject" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudItem xs="12" sm="12" md="12" Style="margin-bottom: 10px;">
                    <MudTextField @bind-Value="@FileObject.Name"
                                  Label=Name
                                  Variant="Variant.Outlined"
                                  Margin="MudBlazor.Margin.Dense"
                                  For="@(() => FileObject.Name)" />
                </MudItem>
                <MudItem xs="12" sm="12" md="12" Style="margin-bottom: 10px;">
                    <MudTextField @bind-Value="@FileObject.Description"
                                  Label=Description
                                  Variant="Variant.Outlined"
                                  Margin="MudBlazor.Margin.Dense"
                                  For="@(() => FileObject.Description)" />
                </MudItem>
               
                <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png, .rar , .pptx,  .docx" />

                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                    Upload Files
                </MudButton>
                
                @if (files.Count>0)
                {
                    <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                    <MudList>
                         <MudListItem Icon="@Icons.Filled.AttachFile" >
                             @files[0].Name <code>@files[0].Size bytes</code>
                         </MudListItem>
                    </MudList>
                }
                <MudGrid Style="margin-top: 10px; margin-bottom: 10px;">
                    <MudItem xs="12" sm="6" md="6" Style="display: flex; align-items: center; justify-content: center;">
                        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="MudBlazor.Color.Error" Class="dialog-button">Cancel</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="6" Style="display: flex; align-items: center; justify-content: center;">
                        <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Disabled="@loading" Class="dialog-button">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            @CreateNoteButtontext()
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public FileDto FileObject { get; set; }
    [Parameter]
    public OperationType operationType { get; set; }
    void Cancel() => MudDialog.Cancel();
    private bool loading;
    UserType UserControl;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    private async void OnValidSubmit()
    {
        if (operationType == OperationType.Add)
        {
            loading = true;
            try
            {
                if(FileObject.Name == "" ||FileObject.Description =="" || FileObject.DataFiles == null )
                {
                    var error = $"{"Fill All Objects"}";
                    Snackbar.Add(error, Severity.Warning, options => options.Onclick = snackbar => Task.CompletedTask);
                    return;
                }
                UserControl = await LocalStorageService.GetCurrentUserType();
                if(UserControl != UserType.Teacher && UserControl != UserType.Admin)
                {
                    var studentID= long.Parse(await LocalStorageService.GetUserId());
                    FileObject.StudentId = studentID;
                }
                await FileService.UploadFiles(FileObject);
                var message = $"{FileObject.Name} {"Note Added Succesfuly"}";
                Snackbar.Add(message, Severity.Success, options => options.Onclick = snackbar => Task.CompletedTask);
                loading = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add("Error Occured", Severity.Error, options => options.Onclick = snackbar => Task.CompletedTask);
            }
        }
        else
        {
            Snackbar.Add("Error Occured", Severity.Error, options => options.Onclick = snackbar => Task.CompletedTask);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
    string CreateNoteButtontext()
    {
        return operationType == OperationType.Add ? "Add Note" : "Confirm";
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        if (files.Count > 0) files.Clear();
        files.Add(e.File);
        var file = files[0];
        var buffer = new byte[file.Size];
        Stream stream = file.OpenReadStream(512000000);
        await stream.ReadAsync(buffer);
        FileObject.DataFiles = buffer;
        switch(file.ContentType){
            case "image/png":
                FileObject.FileType = ".png";
                break;
            case "image/jpeg":
                FileObject.FileType = ".jpeg";
                break;
            case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
                FileObject.FileType = ".pptx";
                break;
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                FileObject.FileType = ".docx";
                break;
            case "":
                FileObject.FileType = ".rar";
                break;
            }


    }
}
