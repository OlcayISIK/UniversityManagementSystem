@inherits LayoutComponentBase
@using MudBlazor;
@using Microsoft.AspNetCore.SignalR.Client;
@using UMS.Client.Business.Interface.Shared
@using UMS.Client.Dtos.Shared
@using UMS.Dto;
@inject IJSRuntime _jsRuntime
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService
@inject ISnackbar Snackbar
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
@code {
    bool _drawerOpen = false;
    private long CurrentUserId { get; set; }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl("http://localhost:5005/chathub").Build();
        await hubConnection.StartAsync();
        hubConnection.On<ChatMessage>("ReceiveChatNotification", (message) =>
        {
            if (CurrentUserId == message.ToUserId)
            {
            //_jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
            Snackbar.Add(message.Message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = "Chat?";
                    config.ActionColor = Color.Info;
                    config.Onclick = snackbar =>
            {
                NavigationManager.NavigateTo($"chat/{message.FromUserId}");
                return Task.CompletedTask;
            };
                });
            }
        });

        try
        {
            CurrentUserId = long.Parse(await LocalStorageService.GetUserId());
        }
        catch
        {
            NavigationManager.NavigateTo("/account/logout");
        }
    }
}
